soft_thresholding <- function(x,a){
if (x>a) return (x-a)
if (x< -a) return (x+a)
return(0)
}
cg_cd <- function(X,b,lambda,tol=1e-4,maxiter=1000,quiet=FALSE){
u <- rep(0, length(b))
u <- as.matrix(u); X <- as.matrix(X)
ulist <- list(length=(maxiter+1))
ulist[[1]] <- u
A<-(1/n)*t(X)%*%X+diag(0.01,p)
for (j in 1:maxiter){
for (k in 1:length(u)){
soft_threshold<-as.matrix(rep(soft_thresholding(b[k],length(b)*lambda),length(b)))
inv_tran_a<-1/(t(A[,k]))
u[k] <- inv_tran_a%*%soft_threshold
}
ulist[[(j+1)]] <- u
if (norm(ulist[[j]] - u,"F") < tol) { break }
}
return(list(u=u))
}
#Simulation for 4 parametes and 20 samples
set.seed(100)
n <- 20 #Sample Size
p=4 # number of parameter
#generate variance covariance matrix pxp
cov_m<-matrix(nrow=p,ncol=p)
for (i in 1:p){
for (j in 1:p){
cov_m[i, j] <- 0.9^(abs(i-j))
}
}
library(MASS)
X <- mvrnorm(n=5, mu = rep(0, p), Sigma = cov_m) #Generate  nxp of X matrix
b<-c(1,rep(0,p-1))
# find u for lambda = 0.01
re <- cg_cd(X, b, 0.01)
print(re)
n <- 200 #Sample Size
p=4 # number of parameter
#generate variance covariance matrix pxp
cov_m<-matrix(nrow=p,ncol=p)
for (i in 1:p){
for (j in 1:p){
cov_m[i, j] <- 0.9^(abs(i-j))
}
}
library(MASS)
X <- mvrnorm(n=5, mu = rep(0, p), Sigma = cov_m) #Generate  nxp of X matrix
b<-c(1,rep(0,p-1))
# find u for lambda = 0.01
re <- cg_cd(X, b, 0.01)
print(re)
knitr::opts_chunk$set(echo = TRUE)
#ADMM algorithm function
cg_admm <- function(X, b, lambda, tol = 1e-4, maxit = 1000) {
n <- nrow(X)
p <- ncol(X)
#initial variables
u <- matrix(0, nrow = p, ncol = 1)
z <- matrix(0, nrow = p, ncol = 1)
w <- matrix(0, nrow = p, ncol = 1)
b_matrix <- matrix(b, nrow = n, ncol=1, byrow = F)
#identity matrix
I <- diag(p)
#pre-compute matrices for efficiency
XtX_over_n_plus_I_inv <- solve((1/n) * t(X) %*% X + 0.01 * I + diag(p))
#ADMM loop
for (iter in 1:maxit) {
print(iter)
#update u
u <- XtX_over_n_plus_I_inv %*% (t(X) %*% b_matrix + rho * (z - w))
#update z (soft-thresholding for L1 penalty)
z <- soft_threshold(u + w, lambda / rho)
#update w
w <- w + u - z
#check for convergence
if (norm(u - z) < tol) {
break
}
}
#calculate the objective value
objective_value <- 0.5 * t(u) %*% ((1/n) * t(X) %*% X + 0.01 * I + diag(p)) %*% u - t(u) %*% b + lambda * sum(abs(u))
return(list(u = u, objective_value = objective_value))
}
# Soft-thresholding function
soft_threshold <- function(x, lambda) {
pmax(0, x - lambda) - pmax(0, -x - lambda)
}
#set parameters as GC code
#set parameters for simulation
rho <- 0.9
n <- 20
p <- 4
#create covariance matrix
cov_matrix <- matrix(0, nrow = p, ncol = p)
for (i in 1:p) {
for (j in 1:p) {
cov_matrix[i, j] <- rho^abs(i - j)
}
}
#simulate data
set.seed(100)  # for reproducibility
X <- MASS::mvrnorm(n = n, mu = rep(0, p), Sigma = cov_matrix)
#set b
b <- c(1, rep(0, p - 1))
#lambda value
lambda_value <- 0.01
#ADMM algorithms and compare their results
result_admm <- cg_admm(X, b, lambda_value)
print(result_admm)
knitr::opts_chunk$set(echo = TRUE)
#soft-thresholding function
soft_threshold <- function(x, lambda) {
pmax(x - lambda, 0) - pmax(-x - lambda, 0)
}
#function to solve regression using ADMM
admm <- function(X, b, lambda, rho, max_iter, tolerance=1e-4) {
n <- ncol(X)
m <- nrow(X)
#initial variables
u <- matrix(0, n, 1)
z <- matrix(0, n, 1)
v <- matrix(0, n, 1)
#precompute A and A^Tb
A <- (1/m) * t(X) %*% X + 0.01 * diag(n)
Atb <- t(A) %*% b
#ADMM iterations
for (k in 1:max_iter) {
#u-update
u = solve(A + rho * diag(n)) %*% (Atb + rho * (z - v))
#z-update
z <- soft_threshold(u + v, lambda / rho)
#v-update
v = v + u - z
#check for convergence
if (sum(abs(u - z)) < tolerance) {
break
}
}
return(list(u = u, z = z))
}
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(Rcpp)
library(RcppArmadillo)
source("project_functions.R")
source("project_functions.R")
sourceCpp("coordinate_descent_algo_alt.cpp")
sourceCpp("admm_cpp_v3.cpp")
#set parameters for simulation
rho <- 0.9
n <- 200
p <- 4
#create covariance matrix
cov_matrix <- matrix(0, nrow = p, ncol = p)
for (i in 1:p) {
for (j in 1:p) {
cov_matrix[i, j] <- rho^abs(i - j)
}
}
#simulate data
set.seed(100)  # for reproducibility
X <- MASS::mvrnorm(n = n, mu = rep(0, p), Sigma = cov_matrix)
#set b
b <- c(1, rep(0, p - 1))
#lambda value
lambda_value <- 0.01
#ADMM  and CD algorithms and compare their results
cd_r <- cg_cd(X, b, lambda_value)
cd_cpp <- cg_cd_cpp(X, b, lambda_value)
source("project_functions.R")
#ADMM  and CD algorithms and compare their results
cd_r <- cg_cd_r(X, b, lambda_value)
cd_cpp <- cg_cd(X, b, lambda_value)
admm_r <- cg_admm_r(X, b, lambda_value)
admm_r <- admm_r(X, b, lambda_value)
source("project_functions.R")
admm_r <- admm_r(X, b, lambda_value)
admm_r <- admm_r(X, b, lambda_value,rho=rho)
admm_cpp <- cg_admm(X, b, lambda_value)
print(cd_r)
print(cd_cpp)
print(cd_r)
print(cd_cpp)
print(admm_r)
print(admm_cpp)
print(cd_r)
print(cd_cpp)
library(MASS)
library(Rcpp)
library(RcppArmadillo)
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
obj <- function(S, b, u, lambda = 0.2) {
ucol <- matrix(u, ncol = 1)
0.5*t(ucol) %*% S %*% ucol - t(ucol) %*% matrix(b, ncol = 1) + lambda * sum(abs(ucol))
}
###### Scenario 1
# Test 1
set.seed(2023)
n <- 100
p <- 5
b <- rep(0, p)
b[1] <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
S <- t(X) %*% X / n + diag(0.01, p)
# Test 1
set.seed(2023)
n <- 100
p <- 5
b <- rep(0, p)
b[1] <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
S <- t(X) %*% X / n + diag(0.01, p)
lambda <- 0.2
cd <- cg_cd(X, b, lambda)
admm <- cg_admm(X, b, lambda)
cd_elastic <- cg_cd_alpha(X, b, lambda)
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd=cd,admm=admm,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd=cd,admm=admm,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
cd <- cg_cd(X, b, lambda)
# Test 1
set.seed(2023)
n <- 100
p <- 5
b <- rep(0, p)
b[1] <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
S <- t(X) %*% X / n + diag(0.01, p)
lambda <- 0.2
cd <- cg_cd(X, b, lambda)
admm <- cg_admm(X, b, lambda)
admm_r(X, b, lambda)
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
admm_r(X, b, lambda)
cd_elastic <- cg_cd_alpha(X, b, lambda)
admm_elastic <- cg_admm_alpha(X, b, lambda)
admm_res <- admm_r(X, b, lambda)
print(list(cd=cd,admm=admm,admm_r =admm_res,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
print(list(cd=cd,admm=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
admm <- cg_admm(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
admm <- cg_admm(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
cd <- cg_cd(X, b, lambda)
admm <- cg_admm(X, b, lambda)
admm_res <- admm_r(X, b, lambda)
cd_elastic <- cg_cd_alpha(X, b, lambda)
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
obj <- function(S, b, u, lambda = 0.2) {
ucol <- matrix(u, ncol = 1)
0.5*t(ucol) %*% S %*% ucol - t(ucol) %*% matrix(b, ncol = 1) + lambda * sum(abs(ucol))
}
###### Scenario 1
# Test 1
set.seed(2023)
n <- 100
p <- 5
b <- rep(0, p)
b[1] <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
S <- t(X) %*% X / n + diag(0.01, p)
lambda <- 0.2
cd <- cg_cd(X, b, lambda)
admm <- cg_admm(X, b, lambda)
admm_res <- admm_r(X, b, lambda)
cd_elastic <- cg_cd_alpha(X, b, lambda)
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
obj <- function(S, b, u, lambda = 0.2) {
ucol <- matrix(u, ncol = 1)
0.5*t(ucol) %*% S %*% ucol - t(ucol) %*% matrix(b, ncol = 1) + lambda * sum(abs(ucol))
}
###### Scenario 1
# Test 1
set.seed(2023)
n <- 100
p <- 5
b <- rep(0, p)
b[1] <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
S <- t(X) %*% X / n + diag(0.01, p)
lambda <- 0.2
cd <- cg_cd(X, b, lambda)
admm <- cg_admm(X, b, lambda)
admm_res <- admm_r(X, b, lambda)
cd_elastic <- cg_cd_alpha(X, b, lambda)
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/admm_cpp_v3.cpp")
source("/Users/cschaef3/Documents/GitHub/1930_final_project/project_functions.R")
###### Scenario 1
# Test 1
set.seed(2023)
n <- 100
p <- 5
b <- rep(0, p)
b[1] <- 1
X <- matrix(rnorm(n * p), nrow = n, ncol = p)
S <- t(X) %*% X / n + diag(0.01, p)
lambda <- 0.2
cd <- cg_cd(X, b, lambda)
admm <- cg_admm(X, b, lambda)
admm_res <- admm_r(X, b, lambda)
cd_elastic <- cg_cd_alpha(X, b, lambda)
admm_elastic <- cg_admm_alpha(X, b, lambda)
print(list(cd_cpp=cd,admm_cpp=admm,admm_r =admm_res$u,cd_elastic=cd_elastic, admm_elastic=admm_elastic))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(Rcpp)
library(RcppArmadillo)
sourceCpp("/Users/cschaef3/Documents/GitHub/1930_final_project/coordinate_descent_algo_alt.cpp")
sourceCpp("admm_cpp_v3.cpp")
#set parameters for simulation
rho <- 0.9
n <- 200
p <- 10
#create covariance matrix
cov_matrix <- matrix(0, nrow = p, ncol = p)
for (i in 1:p) {
for (j in 1:p) {
cov_matrix[i, j] <- rho^abs(i - j)
}
}
#simulate data
set.seed(100)  # for reproducibility
X <- MASS::mvrnorm(n = n, mu = rep(0, p), Sigma = cov_matrix)
#set b
b <- c(1, rep(0, p - 1))
#lambda value
lambda <- 0.01
#ADMM algorithm
elastic_cd <- cg_cd_alpha(X, b, lambda, alpha=.05)
elastic_admm <- cg_admm_alpha(X, b, lambda, alpha=.05)
print(list(cd=elastic_cd,admm=elastic_admm))
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(Rcpp)
library(RcppArmadillo)
sourceCpp("coordinate_descent_algo_alt.cpp")
sourceCpp("admm_cpp_v3.cpp")
re.glmnet <- as.numeric(coef(fit))[-1]
set.seed(100)
n <- 50
p <- 400
X <- matrix(rnorm(n*p), n, p)
b <- rep(0, 400)
b[301:305] <- c(5:1)*2
y <-  X%*%b + rnorm(n)
ynew <-  X%*%b + rnorm(n)
#lambda value
lambda <- 0.2
cd_time <- system.time( cd_fit <- cg_cd(X, b, lambda))
admm_time <- system.time( admm_fit <- cg_admm(X, b, lambda))
library(glmnet)
re <- system.time(fit <- glmnet(X, y, lambda = 1, standardize  = F, intercept = F))
t = list(cd=cd_time, admm=admm_time, glmnet=re)
print(t)
re.glmnet <- as.numeric(coef(fit))[-1]
re <- cbind( re.glmnet[301:305], cd_fit[301:305], admm_fit[301:305])
colnames(re) = c("glmnet","cd","admm")
results <- cbind( re.glmnet[301:305], cd_fit[301:305], admm_fit[301:305])
colnames(results) = c("glmnet","cd","admm")
print(results)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
library(Rcpp)
library(RcppArmadillo)
sourceCpp("coordinate_descent_algo_alt.cpp")
sourceCpp("admm_cpp_v3.cpp")
set.seed(100)
n <- 50
p <- 400
X <- matrix(rnorm(n*p), n, p)
b <- rep(0, 400)
b[301:305] <- c(5:1)*2
y <-  X%*%b + rnorm(n)
ynew <-  X%*%b + rnorm(n)
#lambda value
lambda <- 0.01
cd_time <- system.time( cd_fit <- cg_cd(X, b, lambda))
admm_time <- system.time( admm_fit <- cg_admm(X, b, lambda))
library(glmnet)
re <- system.time(fit <- glmnet(X, y, lambda = 1, standardize  = F, intercept = F))
t = list(cd=cd_time, admm=admm_time, glmnet=re)
print(t)
set.seed(100)
n <- 50
p <- 400
X <- matrix(rnorm(n*p), n, p)
b <- rep(0, 400)
b[301:305] <- c(5:1)*2
y <-  X%*%b + rnorm(n)
ynew <-  X%*%b + rnorm(n)
#lambda value
lambda <- 0.01
cd_time <- system.time( cd_fit <- cg_cd(X, b, lambda))
admm_time <- system.time( admm_fit <- cg_admm(X, b, lambda))
re <- system.time(fit <- glmnet(X, y, lambda = 1, standardize  = F, intercept = F))
t = list(cd=cd_time, admm=admm_time, glmnet=re)
print(t)
re.glmnet <- as.numeric(coef(fit))[-1]
results <- cbind( re.glmnet[301:305], cd_fit[301:305], admm_fit[301:305])
colnames(results) = c("glmnet","cd","admm")
print(results)
